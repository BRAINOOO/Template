void primefact(int n)
-{ 
-   if(n<=1)
-    return;
-   
-   for(int i=2;i*i<=n;i++)
-   {
-      while(n%i==0)
-      {
-         primef.pb(i);
-         n/=i;
-         }
-         }
-         
-         if(n>1)
-         primef.pb(n);
-       }
-    }
- }
- // works in squrt(n)
-------------------------------------------------------------------------------------------------------------------------------------------
works in o(N) mostly or a bit larger

int countPrimesInRange_sieve(int n) 
{
    vector<bool> isPrime(n+1, true);  // set all of them to primes
    isPrime[0] = isPrime[1] = 0;        // 0, 1 are not primes
 
    for (ll i = 2; i*i <= n; ++i) {
        if (isPrime[i]) {
            for (int j = i * 2; j <= n; j += i)
                isPrime[j] = 0;
        }
    }
 
    int cnt = 0;
 
    for (int i = 0; i < (int)isPrime.size(); ++i)
        if(isPrime[i])
            cnt++;
 
    return cnt;
}
----------------------------------------------------------------------------------------------------------------------------------------
// i <= sqrt(n)      power 2 sides
// i * i <= n        Integer version

bool isprime(ll n)
{   // O( sqrt(n)
   
    if(n == 2)    
    return true;
 
    if(n < 2 || n%2 == 0)   
    return false;
 
    for(ll i=3; i*i <= n; i+=2)
    {
        total_operations++;
        if(n%i == 0)
            return false;
    }
    return true;
}
 ---------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 
 
 
 
 
 
 
