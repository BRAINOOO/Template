Segment tree + Lazy Propagation
//#define mid ((st + en) >> 1)
//Sum segment tree

inline void build(int st = 0, int en = n - 1, int root = 1)
{
if(st == en)
{
  tree[root] = arr[st];
   return;
}

build(st, mid, root << 1);
build(mid + 1, en, (root << 1)|1);

tree[root] = tree[root << 1] + tree[(root << 1) |1];
}
//Update by idx and changes value (not addition)

void update(int idx, int val, int st, int en, int root)
{
  if(idx < st || idx > en)
   return;
  if(st == en)
  {
    tree[root] = val;
    return;
   }
update(idx, val, st, mid, root << 1);
update(idx, val, mid + 1, en, (root << 1) | 1);
tree[root] = tree[root << 1] + tree[(root << 1) |1];
}
//Query on range (Not LAZY)

int query(int L, int R, int st, int en, int root)
{
  if(L > en || R < st)
   return 0;
   if(st >= L && en <= R)
   return tree[root];
   return query(L, R, st, mid, root << 1) + query(L,R, mid + 1, en, (root << 1) | 1);
}
//Lazy Propagation

inline void build(int st = 0, int en = n - 1, int root = 1)
{
if(st == en)
{
  tree[root] = st + 1;
   return;
}
int mid = (st + en) >> 1;
build(st, mid, root << 1);
build(mid + 1, en, (root << 1)|1);
}
inline void apply(int root)
{
  if(lazy[root] == -1)
   return;
int L = root << 1;
int R = (root << 1) | 1;
lazy[L] = lazy[R] = tree[L] = tree[R] = lazy[root];
lazy[root] = -1;
}
//Query By idx

inline int query(int idx, int st, int en, int root)
{
if(idx < st || idx > en)
 return 0;
if(st == en)
return tree[root];
apply(root);
return query(idx , st, mid, root << 1) + query(idx, mid + 1, en, (root << 1) | 1);
}
//Query on Range , Like without Lazy Propagation but add apply function

inline void update(int val, int L, int R, int st,int en, int root)
{
  if(R < st || L > en)
   return;

if(st >= L && en <= R)
{
  tree[root] = val;
  lazy[root] = val;
  return;
}
apply(root);
update(val, L, R, st, mid, root << 1);
update(val, L, R, mid + 1, en, (root << 1) | 1);
}
//Lazy Sum

void apply(int root, int st, int mid , int en)
{
   int r = root * 2 + 1;
   int l = root * 2;
lazy[r] += lazy[root];
lazy[l] += lazy[root];
tree[r] += lazy[root] * (en - (mid + 1) + 1);
tree[l] += lazy[root] * (mid - st + 1);
lazy[root] = 0;
}
void update(int L, int R, int val, int st = 0, int en = n - 1, int root = 1){
if(L > en || R < st)
return;
if(st >= L && en <= R)
{
tree[root] += 1LL * val * (en - st + 1);
lazy[root] += val;    // Children are to beupdated
return;
}
int mid = (st + en) >> 1; //Query not in the current range
apply(root, st, mid, en);
update(L, R, val, st, mid, root * 2);
update(L, R, val, mid + 1, en, root * 2 + 1);
tree[root] = tree[root * 2] + tree[root * 2 + 1];
}
ll query(int L, int R, int st = 0, int en = n - 1,int root = 1)
{
if(L > en || R < st)
return 0;

if(st >= L && en <= R)
return tree[root];

int mid = (st + en) >> 1;
apply(root, st, mid, en);
return query(L, R, st, mid, root * 2) + query(L,R, mid + 1, en, root * 2 + 1);

}







