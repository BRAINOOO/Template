struct edge
{
    int f,t;
    ll w;
    edge(int f,int t,ll w) : f(f),t(t),w(w) {}

    bool operator < ( const edge &e) const{

    return w>e.w;
    }

};

void dijkstra(vector< vector<edge> > v,int s)
{


    int n=sz(v);
    num.resize(n);
    dist.resize(n);
    fill(all(num),0);
    fill(all(dist),inf);
    fill(all(prev),-1);

    dist[s]=0;

    priority_queue< edge > pq;

    pq.push(edge(-1,s,0));

    while(!pq.empty())
    {

      edge cur =pq.top();
      pq.pop();

      if(cur.w>dist[cur.t])
        continue;
        
     prev[cur.t]=cur.f ;

      for(int i=0;i<sz(v[cur.t]);i++)
      {

          edge  nw= v[cur.t][i];

          if(dist[nw.t]> nw.w+dist[nw.f])
          {

             nw.w= dist[nw.t]=nw.w+dist[nw.f];
             num[nw.t]=num[cur.t];
              pq.push(nw);

          }
       
      }
    }
}

int main()
{

      int n,m,s,t;
     cin>>n>>m>>s>>t;
     vector< vector<edge > > v(200000+9);
     int f,to;
     ll w;

     for(int i=0;i<m;i++)
     {

         cin>>f>>to>>w;
         v[f].pb(edge(f,to,w));
         v[to].pb(edge(to,f,w));

     }

         dijkstra(v,s);
}
